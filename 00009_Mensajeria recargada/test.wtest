describe "tests " { 

		fixture{
  		paquete.pagar()
      paqueton.pagar(200) 
      paqueton.destinos([puenteDeBrooklyn, laMatrix]) 
    	mensajeria.contratar(neo)
    	mensajeria.contratar(chuck)
    	mensajeria.contratar(roberto)
    }
    
   test "El paqueton con dos destinos y pagos de 200 esta pago" {
    assert.that(paqueton.estaPago())
	}
	
	test "El paqueton con dos destinos, si paga menos de 200 no esta pago" {
    paqueton.pagar(-1) 
    assert.notThat(paqueton.estaPago())
	}
	
	test "Con cualquier mensajero que haya en la mensajeria, el paquetito puede ser llevado"{
		mensajeria.contratar("mensajero trucho")
		assert.that(mensajeria.algunoPuedeEntregar(paquetito))
	}
	test "el paqueton no puede ser entregado si sólo se pagó una parte"{
	  paqueton.pagar(-1) 
  	assert.notThat(mensajeria.algunoPuedeEntregar(paqueton))
	}
	test "el paqueton puede ser entregado si esta pagó y en la mensajeria hay mensajeros que pueden ir a todos los destinos"{
		assert.that(mensajeria.algunoPuedeEntregar(paqueton))
	}

	test "los candidatos para llevar el paqueton son neo y chuck"{
		assert.equals([neo,chuck], mensajeria.candidatosPara(paqueton) )
	}
	test "la mensajeria no tiene sobrepeso (590 + 900 + 0) / 3 < 500"{
    assert.notThat(mensajeria.tieneSobrepeso())
	}

	test "la mensajeria con todos puede enviar paquete"{
    mensajeria.enviar(paquete)
    assert.that(mensajeria.pendientes().isEmpty() )
	}

	test "la mensajeria con solo roberto no puede enviar paquete y queda pendiente"{
    mensajeria.despedir(chuck)
    mensajeria.despedir(neo)
    mensajeria.enviar(paquete)
    assert.that(mensajeria.pendientes().contains(paquete) )
	}
	test "La mensajeria los envia a todos los paquetes" {
	  mensajeria.enviarTodos([paquete,paquetito,paqueton]) 
    assert.that(mensajeria.pendientes().isEmpty() )
  }

	test "La mensajeria con solo roberto envia a paquetito, los otros quedan pendientes" {
    mensajeria.despedir(chuck)
    mensajeria.despedir(neo)
	  mensajeria.enviarTodos([paquete,paquetito,paqueton]) 
    assert.equals([paquete,paqueton], mensajeria.pendientes() )
  }
  test "La mensajeria con paquetes pendietes envia al mas caro que es paqueton "{
    mensajeria.pendientes([paquete,paquetito,paqueton])
    mensajeria.enviarPendienteCaro()
    assert.equals([paquete,paquetito], mensajeria.pendientes() )
  }
  test "La mensajeria con paquetes pendietes intenta enviar al mas caro que es paqueton, pero no hay quien lo envíe porque hubo despidos"{
    mensajeria.despedir(chuck)
    mensajeria.despedir(neo)
    mensajeria.pendientes([paquete,paquetito,paqueton])
    mensajeria.enviarPendienteCaro()
    assert.equals([paquete,paquetito,paqueton], mensajeria.pendientes() )
  }

}